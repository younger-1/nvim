" function! TabMessage(cmd)
"   redir => message
"   silent execute a:cmd
"   redir END
"   if empty(message)
"     echoerr "This command do NOT have output"
"   else
"     " Use "new" instead of "tabnew" below if you prefer split windows instead of tabs
"     tabnew
"     setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
"     silent put=message
"   endif
" endfunction

" command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)

" Inspired by the TabMessage function/command combo found
" at <http://www.jukie.net/~bart/conf/vimrc>.
"
" <https://stackoverflow.com/questions/2573021/how-to-redirect-ex-command-output-into-current-buffer-or-file>

function! redir#Messages(msgcmd, destcmd)
"
" Captures the output generated by executing a:msgcmd, then places this
" output in the current buffer.
"
" If the a:destcmd parameter is not empty, a:destcmd is executed
" before the output is put into the buffer. This can be used to open a
" new window, new tab, etc., before :put'ing the output into the
" destination buffer.
"
" Examples:
"
"   " Insert the output of :registers into the current buffer.
"   call RedirMessages('registers', '')
"
"   " Output :registers into the buffer of a new window.
"   call RedirMessages('registers', 'new')
"
"   " Output :registers into a new vertically-split window.
"   call RedirMessages('registers', 'vnew')
"
"   " Output :registers to a new tab.
"   call RedirMessages('registers', 'tabnew')
"
" Commands for common cases are defined immediately after the
" function; see below.
"
    " Redirect messages to a variable.
    "
    redir => message

    " Execute the specified Ex command, capturing any messages
    " that it generates into the message variable.
    "
    silent execute a:msgcmd

    " Turn off redirection.
    "
    redir END

    if empty(message)
      echoerr "This command do NOT have output"
      return
    endif

    " If a destination-generating command was specified, execute it to
    " open the destination. (This is usually something like :tabnew or
    " :new, but can be any Ex command.)
    "
    " If no command is provided, output will be placed in the current
    " buffer.
    "
    if strlen(a:destcmd) " destcmd is not an empty string
        silent execute a:destcmd
    endif

    setlocal bufhidden=wipe noswapfile nobuflisted nomodified

    " Place the messages in the destination buffer.
    "
    silent put=message

endfunction
