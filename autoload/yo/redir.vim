" function! TabMessage(cmd)
"   redir => message
"   silent execute a:cmd
"   redir END
"   if empty(message)
"     echoerr "This command do NOT have output"
"   else
"     " Use "new" instead of "tabnew" below if you prefer split windows instead of tabs
"     tabnew
"     setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
"     silent put=message
"   endif
" endfunction
" command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)

" Inspired by the TabMessage function/command combo found
" at <http://www.jukie.net/~bart/conf/vimrc>.
"
" <https://stackoverflow.com/questions/2573021/how-to-redirect-ex-command-output-into-current-buffer-or-file>

" Captures the output generated by executing a:msgcmd, then places this
" output in the current buffer.
"
" If the a:destcmd parameter is not empty, a:destcmd is executed
" before the output is put into the buffer. This can be used to open a
" new window, new tab, etc., before :put'ing the output into the
" destination buffer.
"
function! yo#redir#Messages(msgcmd, destcmd)
  " Redirect messages to `message` variable
  "
  redir => message
  silent execute a:msgcmd
  redir END

  if empty(message)
    echoerr "This command do NOT have output"
    return
  endif

  " If a destination-generating command was specified, execute it to
  " open the destination. (This is usually something like :tabnew or
  " :new, but can be any Ex command.)
  "
  " If no command is provided, output will be placed in the current buffer.
  "
  if strlen(a:destcmd)
    silent execute a:destcmd
    " setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put=message
    1,2d_
  else
    silent put=message
  endif
endfunction

function! yo#redir#Source(msgcmd, destcmd)
  redir => message
  silent execute a:msgcmd
  redir END

  " Close other windows
  wincmd o

  if strlen(a:destcmd)
    silent execute a:destcmd
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted
    silent put=message
    1,2d_

    " Goto source file
    wincmd p
  endif
endfunction
