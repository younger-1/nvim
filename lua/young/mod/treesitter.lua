-- use a mirror instead of "https://github.com/"
-- for _, config in pairs(require("nvim-treesitter.parsers").get_parser_configs()) do
--   config.install_info.url = config.install_info.url:gsub("https://github.com/", "something else")
-- end

-- require('nvim-treesitter.install').compilers = { 'clang' }
require('nvim-treesitter.install').prefer_git = false

-- local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()
-- parser_configs.norg = {
--   install_info = {
--     url = 'https://github.com/nvim-neorg/tree-sitter-norg',
--     files = { 'src/parser.c', 'src/scanner.cc' },
--     branch = 'main',
--   },
-- }

require('nvim-treesitter.configs').setup {
  -- 100
  -- echo json_decode(readfile(glob(stdpath('data') .. '/site/pack/packer/start/nvim-treesitter/lockfile.json'))) ->keys()
  -- lua pp(vim.tbl_keys(vim.fn.json_decode(vim.fn.readfile(_G.packer_plugins['nvim-treesitter'].path .. '/lockfile.json'))))
  -- lua pp(vim.tbl_keys(vim.json.decode(vim.fn.join(vim.fn.readfile(_G.packer_plugins['nvim-treesitter'].path .. '/lockfile.json'), ''))))
  ensure_installed = {
    'bash',
    -- 'beancount',
    -- 'bibtex',
    'c',
    -- 'c_sharp',
    -- 'clojure',
    -- 'cmake',
    -- 'comment',
    -- 'commonlisp',
    'cpp',
    -- 'css',
    -- 'cuda',
    -- 'd',
    -- 'dart',
    -- 'devicetree',
    -- 'dockerfile',
    -- 'dot',
    -- 'eex',
    -- 'elixir',
    -- 'elm',
    -- 'erlang',
    -- 'fennel',
    -- 'fish',
    -- 'foam',
    -- 'fortran',
    -- 'fusion',
    -- 'gdscript',
    -- 'gleam',
    -- 'glimmer',
    -- 'glsl',
    'go',
    -- 'godot_resourc e',
    -- 'gomod',
    -- 'gowork',
    -- 'graphql',
    -- 'hack',
    -- 'haskell',
    -- 'hcl',
    -- 'heex',
    -- 'hjson',
    -- 'hocon',
    -- 'html',
    -- 'http',
    'java',
    -- 'javascript',
    -- 'jsdoc',
    'json',
    -- 'json5',
    'jsonc',
    -- 'julia',
    -- 'kotlin',
    -- 'lalrpop',
    'latex',
    -- 'ledger',
    -- 'llvm',
    'lua',
    -- 'make',
    'markdown',
    -- 'ninja',
    -- 'nix',
    -- 'norg',
    -- 'ocaml',
    -- 'ocaml_interface',
    -- 'ocamllex',
    -- 'pascal',
    -- 'perl',
    -- 'php',
    -- 'phpdoc',
    -- 'pioasm',
    -- 'prisma',
    -- 'pug',
    'python',
    -- 'ql',
    -- 'query',
    -- 'r',
    -- 'rasi',
    -- 'regex',
    -- 'rst',
    -- 'ruby',
    'rust',
    -- 'scala',
    -- 'scss',
    -- 'sparql',
    -- 'supercollider',
    -- 'surface',
    -- 'svelte',
    -- 'swift',
    -- 'teal',
    -- 'tlaplus',
    -- 'toml',
    -- 'tsx',
    -- 'turtle',
    -- 'typescript',
    -- 'vala',
    -- 'verilog',
    'vim',
    -- 'vue',
    'yaml',
    -- 'yang',
    -- 'zig',
  },
  highlight = {
    enable = true, -- false will disable the whole extension
    -- custom_captures = {
    --   ['primitive.type'] = 'Keyword',
    --   ['escape.sequence'] = 'Function',
    -- },
  },
  playground = {
    enable = true,
    disable = {},
    updatetime = 25, -- Debounced time for highlighting nodes in the playground from source code
    persist_queries = false, -- Whether the query persists across vim sessions
  },
  autotag = { enable = true },
}
