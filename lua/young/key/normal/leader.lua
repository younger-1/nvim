local vim = vim
local cmd = require('young.key').cmd
local lua = require('young.key').lua

-- TODO:add function instead of <cmd><cr>
return {
  -- [' '] = { ':', 'which_key_ignore', mode = { 'n', 'x' } },
  ['`'] = { '<cmd>intro<cr>', 'Intro' },
  -- ['~'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- ['0'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- ['-'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- ['='] = { '<cmd>Alpha<cr>', 'Alpha' },
  ['<BS>'] = { '<cmd>Alpha<cr>', 'Dashboard' },
  -- ['<Tab>'] = { '<cmd>CellularAutomaton make_it_rain<cr>', 'Rain' },
  ['<CR>'] = { '<cmd>message<cr>', 'which_key_ignore' },
  -- ['['] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- [']'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- ['{'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- ['}'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- ['<'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- ['>'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- ['\'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- ['|'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- [';'] = { cmd 'Alpha', 'Dashboard' },
  -- [':'] = { '<cmd>Alpha<cr>', 'Alpha' },
  -- ['"'] = { '<cmd>Alpha<cr>', 'Alpha' },
  [','] = { cmd 'Telescope buffers', 'Buffers' },
  ['.'] = { cmd 'Telescope find_files layout_strategy=horizontal', 'Files' },
  ['/'] = { cmd 'Telescope current_buffer_fuzzy_find', 'Buffer string' },
  ['?'] = {
    name = '+help',
    ['?'] = { ':h reference_toc<cr>', '❓' },
    [' '] = { ':h api<cr>', 'Api' },
    ['<tab>'] = { ':h news<cr>', 'News' },
    A = { ':h vim-additions<cr>', 'Vim additions' },
    C = { ':h cterm-colors<cr>', 'Vim colors' },
    E = { ':h ex-edit-index<cr>', 'Ex-edit index' },
    F = { ':h function-list<cr>', 'Function list' },
    H = { ':h help-summary<cr>', 'Help' },
    I = { ':h insert-index<cr>', 'Insert index' },
    L = { ':h lsp<cr>', 'LSP' },
    M = { ':h map-modes<cr>', 'Map modes' },
    N = { ':h notation<cr>', 'Notation' },
    O = { ':h option-list<cr>', 'Option list' },
    T = { ':h tips<cr>', 'Tips' },
    a = { ':h vim-arguments<cr>', 'Vim arguments' },
    c = { ':h gui-colors<cr>', 'Vim colors' },
    d = { ':h nvim-defaults<cr>', 'Defaults' },
    e = { ':exu<cr>', 'Ex-cmd index' },
    f = { ':h vim-function<cr>', 'Functions' },
    g = { ':h g<cr>', 'g-index' },
    h = { ':h help-tags<cr>', 'Help tags' },
    i = { ':h index<cr>', 'Index' },
    k = { ':h key-codes<cr>', 'Key codes' },
    l = { ':h lua<cr>', 'Lua' },
    m = { ':h vim-modes<cr>', 'Modes' },
    n = { ':viu<cr>', 'Normal index' },
    o = { ':options<cr>', 'Options' },
    p = { ':h local-additions<cr>', 'Plugin' },
    q = { ':h quickref<cr>', 'Quick reference' },
    s = { ':h startup<cr>', 'Startup' },
    t = { ':h objects<cr>', 'Text objects' },
    u = { ':h user-manual<cr>', 'User manual' },
    v = { ':h vim-variable<cr>', 'Vim variable' },
    w = { ':h ctrl-w<cr>', 'Windows index' },
    x = { ':h visual-index<cr>', 'Visual index' },
    y = { ':h [<cr>', '[ ] index' },
    z = { ':h z<cr>', 'z-index' },
  },
  a = {
    name = '+apps',
    [' '] = { cmd 'Telescope command_palette', 'Command palette' },
    e = { '+external' },
    g = {
      name = '+github',
      g = { 'Telescope gh gist', 'Gist' },
      i = { 'Telescope gh issues', 'Issues' },
      p = { 'Telescope gh pull_request', 'Pull_request' },
      r = { 'Telescope gh run', 'Run' },
    },
    m = { cmd 'MarkdownPreviewToggle', 'Markdown' },
    n = {
      name = '+nabla',
      n = { lua "require('nabla').popup { border = 'rounded' }", 'ASCII LaTeX equations' },
      r = { lua "require('nabla').replace_current()", 'Replace current LaTeX equations' },
      a = { lua "require('nabla').replace_all()", 'Replace current LaTeX equations' },
      d = { lua "require('nabla').draw_overlay()", 'Draw overlay' },
      t = { lua "require('nabla').toggle_virt()", 'Toggle ASCII LaTeX' },
    },
    u = { xy.tool.open_url, 'Open github url' },
    v = { cmd 'OpenInVSCode', 'Open in vscode' },
  },
  b = {
    name = '+buffer',
    s = {
      name = '+sort',
    },
    -- A = { cmd 'TablineToggleShowAllBuffers', 'Tabline toggle all' },
    -- U = { cmd 'TablineBuffersClearBind', 'Tabline unbound' },
    -- B = { ':TablineBuffersBind ', 'Tabline bound' },
    -- R = { ':TablineTabRename ', 'Tabline rename' },
    -- N = { ':TablineTabNew ', 'Tabline new' },
    -- T = { ':TablineCustom ', 'Tabline++' },
  },
  -- c = { '<cmd>BufferClose!<cr>', 'Close buffer' },
  c = {
    name = '+code',
    c = {
      name = '+lsp-extension',
    },
    n = {
      name = '+neogen',
    },
  },
  C = { ':call OpenLastClosed()<cr>', 'which_key_ignore' },
  d = {
    name = '+debug',
    s = {
      name = '+telescope',
      [' '] = { cmd 'Telescope dap configurations', 'Dap configurations' },
      c = { cmd 'Telescope dap commands', 'Dap commands' },
      l = { cmd 'Telescope dap list_breakpoints', 'Dap list_breakpoints' },
      v = { cmd 'Telescope dap variables', 'Dap variables' },
      f = { cmd 'Telescope dap frames', 'Dap frames' },
    },
    [' '] = { lua "require'dapui'.toggle()", ' UI' },
    ['<tab>'] = '+lang',
    f = {
      s = { cmd 'DapScopesFloat', 'Scopes float' },
      f = { cmd 'DapFramesFloat', 'Frames Float' },
      e = { cmd 'DapExpressionFloat', 'Expression float' },
      t = { cmd 'DapThreadsFloat', 'Threads float' },
    },
    -- h = { lua "require'dap.ui.widgets'.hover()", 'Hover' },
    h = { lua "require'dapui'.eval(nil, { enter = true })", 'Hover' },
    t = { cmd 'DapVirtualTextToggle', 'Virtual text' },
    ['['] = { lua "require('persistent-breakpoints.api').load_breakpoints()", 'Load breakpoints' },
    [']'] = { lua "require('persistent-breakpoints.api').store_breakpoints()", 'Store breakpoints' },

    L = { cmd 'DapShowLog', 'Show log' },

    -- s = { lua "require'dap'.continue()", ' Start' },
    c = { lua "require'dap'.continue()", ' Continue' },
    a = { lua "require'dap'.run_to_cursor()", '省 Run to cursor' },
    x = { lua "require'dap'.run_last()", ' Run last' },
    v = { lua "require'dap'.goto_()", 'Jump/Skip to line' },
    z = { lua "require'dap'.pause()", '懶 Pause' },

    d = { lua "require'dap'.toggle_breakpoint()", 'ﴫ Toggle breakpoint' },
    E = { lua "require'dap'.set_breakpoint(vim.fn.input('Condition: '))", ' Condition breakpoint' },
    F = { lua "require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))", ' Log breakpoint' },
    H = { lua "require'dap'.set_breakpoint(nil, vim.fn.input('Hit times: '))", ' Hit breakpoint' },

    g = { lua "require'dap'.set_exception_breakpoints()", 'Ask exception breakpoints' },
    G = { lua "require'dap'.set_exception_breakpoints('default')", 'Default exception breakpoints' },
    l = { lua "require'dap'.list_breakpoints(true)", 'List breakpoints' },
    C = { lua "require'dap'.clear_breakpoints()", 'Clear breakpoints' },

    r = { lua "require'dap'.repl.toggle()", ' Toggle repl' },
    R = { lua "require'dap'.toggle()", 'Toggle Repl' },

    o = { lua "require'dap'.step_over()", ' Step over' },
    i = { lua "require'dap'.step_into()", ' Step into' },
    I = { lua "require'dap'.step_into { askForTargets = true }", ' Step into' },
    u = { lua "require'dap'.step_out()", ' Step out' },
    b = { lua "require'dap'.step_back()", 'Step back' },
    B = { lua "require'dap'.reverse_continue()", 'Reverse Continue' },
    j = { lua "require'dap'.down()", 'Stacktrace down' },
    k = { lua "require'dap'.up()", 'Stacktrace up' },

    q = { lua "require'dap'.terminate()", 'Terminate' },
    Q = { lua "require'dap'.disconnect()", 'Disconnect' },
    -- q = { lua "require'dap'.close()", 'Quit' },

    m = { lua "pp(require'dap'.status(), require'dap'.session())", 'Print session' },
    J = { lua "require('dap.ext.vscode').load_launchjs()", 'Load launch JSON' },
  },
  e = { name = 'explorer' },
  g = {
    name = '+git',
    [' '] = { cmd 'tab Git', 'Git' },
    m = { cmd 'Flog', 'Flog' },
    ['"'] = { cmd 'Gitsigns toggle_current_line_blame', 'Blames' },
    ["'"] = { cmd 'Gitsigns toggle_linehl', 'Line highlight' },
    ['`'] = { cmd 'Gitsigns toggle_numhl', 'Number highlight' },
    [';'] = { cmd 'Gitsigns toggle_deleted', 'Deleted lines' },
    [','] = { cmd 'Gitsigns toggle_signs', 'Sign highlight' },
    ['<C-q>'] = {
      name = '+quickfix',
      a = { "<cmd>lua require 'gitsigns'.setqflist('all')<cr>", 'All git' },
      b = { "<cmd>lua require 'gitsigns'.setqflist('attached')<cr>", 'Buffers' },
      c = { cmd 'Gitsigns setqflist', 'Current' },
    },
    ['<C-a>'] = {
      name = '+loclist',
      a = { lua "require 'gitsigns'.setloclist(0, 'all')", 'All git' },
      b = { lua "require 'gitsigns'.setloclist(0, 'attached')", 'Buffers' },
      c = { cmd 'Gitsigns setloclist', 'Current' },
    },
    b = { cmd 'Telescope git_branches', 'Branches' },
    c = { cmd 'Telescope git_commits', 'Commits' },
    C = { cmd 'Telescope git_bcommits', 'Commits(current file)' },
    e = { cmd 'Telescope git_stash', 'Stash' },
    f = { cmd 'Telescope git_files', 'Files' },
    o = { cmd 'Telescope git_status', 'Open changed file' },
    h = { cmd 'Telescope git_bcommits_range', 'Commits(current line)' },
    -- d = { cmd 'Gitsigns diffthis ~1', 'Diff this' },
    d = {
      name = '+diff',
      [' '] = { ':DiffviewOpen ', 'Diffview open' },
      ['<tab>'] = { ':DiffviewFileHistory ', 'Diffview commits' },
      -- s = { cmd 'DiffviewOpen --staged', 'Open staged' },
      -- c = { cmd 'DiffviewClose', 'Close diff' },
      -- t = { cmd 'DiffviewToggleFiles', 'Toggle files' },
      d = { cmd 'DiffviewOpen', 'Open diff' },
      h = { cmd 'DiffviewFileHistory', 'All commits' },
      f = { cmd 'DiffviewFileHistory %', 'File commits' },
      p = { cmd 'DiffviewLog', 'Log' },
      --
      a = { ':DiffviewFileHistory --author=', 'All commits (author)' },
      m = { ':DiffviewFileHistory --grep=', 'All commits (log message)' },
      l = { cmd 'DiffviewFileHistory --base=LOCAL', 'All commits (compare to local)' },
      y = { cmd 'DiffviewFileHistory --merges', 'All commits (merge)' },
      Y = { cmd 'DiffviewFileHistory --no-merges', 'All commits (no merge)' },
      --
      A = { ':DiffviewFileHistory % --author=', 'File commits (author)' },
      M = { ':DiffviewFileHistory % --grep=', 'File commits (log message)' },
      L = { cmd 'DiffviewFileHistory % --base=LOCAL', 'File commits (compare to local)' },
      R = { ':DiffviewFileHistory -L,:<Left><Left>', 'File commits (range)' },
      F = { ':DiffviewFileHistory -L::<Left>', 'File commits (func)' },
    },
    i = {
      name = '+gist',
      a = { '<cmd>Gist -b -a<cr>', 'Create anon' },
      d = { '<cmd>Gist -d<cr>', 'Delete' },
      f = { '<cmd>Gist -f<cr>', 'Fork' },
      g = { '<cmd>Gist -b<cr>', 'Create' },
      l = { '<cmd>Gist -l<cr>', 'List' },
      p = { '<cmd>Gist -b -p<cr>', 'Create private' },
    },
    j = { cmd 'Gitsigns next_hunk', 'Next hunk' },
    k = { cmd 'Gitsigns prev_hunk', 'Prev hunk' },
    l = { cmd 'Gitsigns blame_line', 'Blame' },
    L = { "<cmd>lua require 'gitsigns'.blame_line { full=true }<cr>", 'Blame' },
    n = {
      name = '+neogit',
      c = { "<cmd>lua require('neogit').open({ 'commit' })<cr>", 'Commit' },
      n = { '<cmd>Neogit<cr>', '♐' },
      s = { "<cmd>lua require('neogit').open({ kind = 'split' })<cr>", 'Commit' },
      v = { "<cmd>lua require('neogit').open({ kind = 'vsplit' })<cr>", 'Commit' },
    },
    p = { cmd 'Gitsigns preview_hunk_inline', 'Preview hunk inline' },
    P = { cmd 'Gitsigns preview_hunk', 'Preview hunk' },
    r = { ':Gitsigns reset_hunk<CR>', 'Reset Hunk', mode = { 'n', 'x' } },
    R = { cmd 'Gitsigns reset_buffer', 'Reset buffer' },
    s = { ':Gitsigns stage_hunk<CR>', 'Stage Hunk', mode = { 'n', 'x' } },
    S = { cmd 'Gitsigns stage_buffer', 'Stage buffer' },
    u = { ':Gitsigns undo_stage_hunk<CR>', 'Undo stage Hunk', mode = { 'n', 'x' } },
    U = { cmd 'Gitsigns reset_buffer_index', 'Reset buffer index' },
    w = { cmd 'Gitsigns toggle_word_diff', 'Word diff' },
  },
  h = { '<cmd>nohlsearch<cr>', 'which_key_ignore' },
  j = {
    name = '+jump',
  },
  k = {
    name = '+kit',
  },
  l = {
    name = '+lsp',
  },
  L = {
    name = '+lua',
    -- impatient.nvim
    -- c = { '<cmd>LuaCacheClear<cr>', 'LuaCache clear' },
    -- l = { '<cmd>LuaCacheLog<cr>', 'LuaCache log' },
    -- p = { '<cmd>LuaCacheProfile<cr>', 'LuaCache profile' },
    L = {
      name = '+logs',
      d = {
        "<cmd>lua require('lvim.core.terminal').toggle_log_view(require('lvim.core.log').get_path())<cr>",
        'view default log',
      },
      D = {
        "<cmd>lua vim.fn.execute('edit ' .. require('lvim.core.log').get_path())<cr>",
        'Open the default logfile',
      },
      l = { "<cmd>lua require('lvim.core.terminal').toggle_log_view(vim.lsp.get_log_path())<cr>", 'view lsp log' },
      L = { "<cmd>lua vim.fn.execute('edit ' .. vim.lsp.get_log_path())<cr>", 'Open the LSP logfile' },
      n = {
        "<cmd>lua require('lvim.core.terminal').toggle_log_view(os.getenv('NVIM_LOG_FILE'))<cr>",
        'view neovim log',
      },
      N = { '<cmd>edit $NVIM_LOG_FILE<cr>', 'Open the Neovim logfile' },
      p = { "<cmd>lua require('lvim.core.terminal').toggle_log_view('packer.nvim')<cr>", 'view packer log' },
      P = { "<cmd>exe 'edit '.stdpath('cache').'/packer.nvim.log'<cr>", 'Open the Packer logfile' },
    },
  },
  m = {
    name = '+mark',
  },
  n = {
    name = '+noice',
  },
  N = { '<cmd>tabnew | set nobuflisted<cr>', 'which_key_ignore' },
  o = {
    name = '+open',
    t = { cmd 'TodoQuickFix', 'Todo qf' },
    T = { cmd 'TodoTelescope', 'Todo telescope' },
  },
  p = {
    name = '+project',
    s = {
      name = '+sessions',
      l = { lua 'require("persistence").load()', 'Current session' },
      L = { lua 'require("persistence").load({ last = true })', 'Last session' },
      s = { lua 'require("persistence").stop()', 'Stop session' },
    },
    S = {
      name = '+session-man',
      l = { cmd 'SessionManager load_current_dir_session', 'Current session' },
      L = { cmd 'SessionManager load_last_session', 'Last session' },
      a = { cmd 'SessionManager load_session', 'All sessions' },
      d = { cmd 'SessionManager delete_session', 'Delete session' },
      S = { cmd 'SessionManager save_current_session', 'Save session' },
    },
    -- C = { cmd 'PackerCompile profile=true', 'Compile++' },
    -- P = { cmd 'PackerProfile', 'Profile' },
    -- S = { cmd 'PackerSync', 'Sync' },
    -- c = { cmd 'PackerCompile', 'Compile' },
    -- i = { cmd 'PackerInstall', 'Install' },
    -- k = { cmd 'PackerClean', 'Clean' },
    -- p = { cmd 'Telescope packer', 'Telescope Packer' },
    -- r = { require('young.packer').recompile, 'Re-compile' },
    -- s = { cmd 'PackerStatus', 'Status' },
    -- u = { cmd 'PackerUpdate', 'Update' },
    -- U = { cmd 'PackerUpdate --preview', 'Update (preview)' },
    -- b = { require('young.packer').rollback, 'Rollback' },
    -- n = { require('young.packer').snapshot, 'Snapshot' },
    -- m = { require('young.packer').snapshot_hook, 'Snapshot sort' },
    -- v = { require('young.packer').loaded, 'Loaded' },
  },
  q = { '<cmd>QuitWindow<cr>', 'which_key_ignore' },
  Q = { '<cmd>q<cr>', 'which_key_ignore' },
  -- Q = { '<cmd>tabclose<cr>', 'which_key_ignore' },
  r = {
    name = '+replace',
  },
  s = {
    name = '+search',
  },
  t = {
    name = '+toggle',
    [':'] = { ':call wilder#toggle()<cr>', 'Wilder' },
    a = {
      name = '+autocmd',
      f = { require('young.autocmd').toggle_format_on_save, 'Format on save' },
      p = { require('young.autocmd').toggle_print_ascii, 'Print ASCII' },
      -- r = { require('young.autocmd').toggle_auto_chdir, 'Auto chdir' },
      -- c = { require('young.autocmd').toggle_auto_cursorline, 'Cursorline' },
    },
    b = 'Biscuits',
    m = { cmd 'MinimapToggle', 'Minimap' },
    l = { require('young.tool').toggle_tabline, 'Tabline' },
    n = { require('young.tool').toggle_notify_style, 'Nofity style' },
    N = { require('young.tool').toggle_notify, 'Toggle nofity' },
    -- t = { cmd 'TransparentToggle', 'Transparent' },
    x = { cmd 'Hexmode', 'Hex mode' },
    u = { cmd 'UndotreeToggle', 'Undotree' },
  },
  T = {
    name = '+treesitter',
    t = { cmd 'Telescope treesitter', 'Telescope' },
    i = { cmd 'TSConfigInfo', 'Config' },
    I = { cmd 'TSModuleInfo', 'Module' },
    --
    h = { cmd 'TSBufToggle highlight', 'Toggle highlight(Buffer)' },
    r = { cmd 'TSBufToggle rainbow', 'Toggle rainbow' },
    -- Playground
    c = { cmd 'TSCaptureUnderCursor', 'Highlight' },
    n = { cmd 'TSNodeUnderCursor', 'Node' },
    p = { cmd 'TSPlaygroundToggle', 'Playground' },
    -- Context
    C = { cmd 'TSContextToggle', 'Toggle context' },
  },
  u = {
    name = '+ui',
  },
  v = {
    name = '+vim',
    v = { cmd 'Inspect', 'Inspect' },
    t = { cmd 'InspectTree', 'Inspect tree' },
  },
  -- w = { '<cmd>w!<cr>', 'Save' },
  w = { cmd 'update', 'which_key_ignore' },
  x = {
    name = '+trouble',
  },
  y = {
    name = '+young',
    b = {
      function()
        require('telescope.builtin').git_commits {
          cwd = vim.fn.stdpath 'config',
        }
      end,
      'Git commit',
    },
    c = {
      function()
        local file = join_paths(vim.fn.stdpath 'config', 'init.lua')
        xy.util.open_file(file)
      end,
      'Open init.lua',
    },
    f = {
      function()
        require('young.mod.telescope.finder').find_config()
      end,
      'Find Config files',
    },
    g = {
      function()
        require('young.mod.telescope.finder').grep_config()
      end,
      'Grep Config files',
    },
    -- i = { "<cmd>lua require('lvim.core.info').toggle_popup(vim.bo.filetype)<cr>", 'Toggle LunarVim Info' },
    -- I = {
    --   "<cmd>lua require('lvim.core.telescope.custom-finders').view_lunarvim_changelog()<cr>",
    --   "View LunarVim's changelog",
    -- },
    -- k = { "<cmd>lua require('lvim.keymappings').print()<cr>", "View LunarVim's default keymappings" },
    l = {
      function()
        local file = require('young.cfg').create_local_config()
        xy.util.open_file(file)
      end,
      'Edit local config',
    },
    o = {
      function()
        require('young.mod.telescope.finder').open_changed_config()
      end,
      'Open changed Config files',
    },
    r = { require('young.cfg').reload, 'Reload configuration' },
    y = {
      function()
        local file = require('young.cfg').lazy_path
        xy.util.open_file(file)
      end,
      'Open plugins',
    },
    -- y = { cmd('edit ' .. require('young.cfg').reload_path), 'Edit plugins' },
    -- y = { "<cmd>lua vim.fn.execute('edit ' .. require('young.cfg').reload_path)<cr>", 'Edit plugins' },
  },
  -- z = { cmd 'ZenMode', 'Zen' },
}
